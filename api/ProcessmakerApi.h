/**
 * ProcessMaker API
 * This ProcessMaker Core API provide access to the new generation engine with BPMN 2.0 support. The current Alpha 1.0 version supports  the part of BPM system functionality like process import, process execution, task assignment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alpha-program@processmaker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * ProcessmakerApi.h
 * 
 * 
 */
 
#ifndef ProcessmakerApi_H_
#define ProcessmakerApi_H_


#include "ApiClient.h"

#include <cpprest/details/basic_types.h>
#include "ErrorArray.h"
#include "ClientItem.h"
#include "ClientCreateItem.h"
#include "EventItem.h"
#include "EventCreateItem.h"
#include "FlowCreateItem.h"
#include "FlowItem.h"
#include "GatewayItem.h"
#include "GatewayCreateItem.h"
#include "GroupCreateItem.h"
#include "GroupItem.h"
#include "ResultSuccess.h"
#include "TaskAddGroupsItem.h"
#include "InputOutputCreateItem.h"
#include "InputOutputItem.h"
#include "InstanceCreateItem.h"
#include "InstanceItem.h"
#include "ProcessItem.h"
#include "ProcessCreateItem.h"
#include "TaskItem.h"
#include "TaskCreateItem.h"
#include "UserItem.h"
#include "UserCreateItem.h"
#include "GroupAddUsersItem.h"
#include "TriggerEventCreateItem.h"
#include "DataModelItem_1.h"
#include "ClientCollection.h"
#include "EventCollection.h"
#include "FlowCollection.h"
#include "GatewayCollection.h"
#include "GroupCollection.h"
#include "InputOutputCollection.h"
#include "InstanceCollection.h"
#include "ProcessCollection.h"
#include "Inline_response_200.h"
#include "TaskInstanceCollection.h"
#include "TaskCollection.h"
#include "UserCollection.h"
#include "BpmnImportItem.h"
#include "ProcessCollection_1.h"
#include "TaskRemoveGroupsItem.h"
#include "GroupRemoveUsersItem.h"
#include "TaskSyncGroupsItem.h"
#include "GroupSyncUsersItem.h"
#include "ClientUpdateItem.h"
#include "EventUpdateItem.h"
#include "FlowUpdateItem.h"
#include "GatewayUpdateItem.h"
#include "GroupUpdateItem.h"
#include "InputOutputUpdateItem.h"
#include "InstanceUpdateItem.h"
#include "ProcessUpdateItem.h"
#include "TaskUpdateItem.h"
#include "TaskInstanceUpdateItem.h"
#include "UserUpdateItem.h"

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  ProcessmakerApi
{
public:
    ProcessmakerApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~ProcessmakerApi();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for creating a new Client for User
    /// </remarks>
    /// <param name="userId">ID of User relative to client</param>/// <param name="clientCreateItem">JsonApi with the Client object to add</param>
    pplx::task<std::shared_ptr<ClientItem>> addClient(utility::string_t userId, std::shared_ptr<ClientCreateItem> clientCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for creating a new event.
    /// </remarks>
    /// <param name="processId">ID of Process relative to task</param>/// <param name="eventCreateItem">JsonApi with the Event object to add</param>
    pplx::task<std::shared_ptr<EventItem>> addEvent(utility::string_t processId, std::shared_ptr<EventCreateItem> eventCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for creating a new Sequence flow
    /// </remarks>
    /// <param name="processId">ID of Process relative to flow</param>/// <param name="flowCreateItem">JsonApi with the Flow object to add</param>
    pplx::task<std::shared_ptr<FlowItem>> addFlow(utility::string_t processId, std::shared_ptr<FlowCreateItem> flowCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for creating a new gateway.
    /// </remarks>
    /// <param name="processId">ID of Process relative to gateway</param>/// <param name="gatewayCreateItem">JsonApi with the Gateway object to add</param>
    pplx::task<std::shared_ptr<GatewayItem>> addGateway(utility::string_t processId, std::shared_ptr<GatewayCreateItem> gatewayCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for creating a new group.
    /// </remarks>
    /// <param name="groupCreateItem">JsonApi with the Group object to add</param>
    pplx::task<std::shared_ptr<GroupItem>> addGroup(std::shared_ptr<GroupCreateItem> groupCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for assignment group(s) to the choosen task
    /// </remarks>
    /// <param name="processId">ID of Process</param>/// <param name="taskId">ID of Task to modify</param>/// <param name="taskAddGroupsItem">JsonApi with Groups ids to add</param>
    pplx::task<std::shared_ptr<ResultSuccess>> addGroupsToTask(utility::string_t processId, utility::string_t taskId, std::shared_ptr<TaskAddGroupsItem> taskAddGroupsItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for creating a new InputOutput
    /// </remarks>
    /// <param name="processId">Process ID related to InputOutput object</param>/// <param name="taskId">Task instance ID related to InputOutput object</param>/// <param name="inputOutputCreateItem">Create and add a new InputOutput object with JSON API</param>
    pplx::task<std::shared_ptr<InputOutputItem>> addInputOutput(utility::string_t processId, utility::string_t taskId, std::shared_ptr<InputOutputCreateItem> inputOutputCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for creating a new instance.
    /// </remarks>
    /// <param name="processId">Process ID relative to instance</param>/// <param name="instanceCreateItem">JsonApi with the Instance object to add</param>
    pplx::task<std::shared_ptr<InstanceItem>> addInstance(utility::string_t processId, std::shared_ptr<InstanceCreateItem> instanceCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is responsible for creating a new process
    /// </remarks>
    /// <param name="processCreateItem">JsonApi with the Process object to add</param>
    pplx::task<std::shared_ptr<ProcessItem>> addProcess(std::shared_ptr<ProcessCreateItem> processCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for creating a new task.
    /// </remarks>
    /// <param name="processId">ID of Process relative to task</param>/// <param name="taskCreateItem">JsonApi with the Task object to add</param>
    pplx::task<std::shared_ptr<TaskItem>> addTask(utility::string_t processId, std::shared_ptr<TaskCreateItem> taskCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for creating a new user in the system.
    /// </remarks>
    /// <param name="userCreateItem">JsonApi with the User object to add</param>
    pplx::task<std::shared_ptr<UserItem>> addUser(std::shared_ptr<UserCreateItem> userCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for adding one, or more new users to a group.
    /// </remarks>
    /// <param name="id">ID of Group to modify</param>/// <param name="groupAddUsersItem">JsonApi with Users ids to add</param>
    pplx::task<std::shared_ptr<ResultSuccess>> addUsersToGroup(utility::string_t id, std::shared_ptr<GroupAddUsersItem> groupAddUsersItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for deleting a single item based on the Client and User IDs.
    /// </remarks>
    /// <param name="userId">ID of of User item</param>/// <param name="clientId">ID of item to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteClient(utility::string_t userId, utility::string_t clientId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for deleting a single item based on event_id and Process ID.
    /// </remarks>
    /// <param name="processId">ID of of Process item</param>/// <param name="eventId">ID of item to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteEvent(utility::string_t processId, utility::string_t eventId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for deleting a single item based on the flow_id and Process ID.
    /// </remarks>
    /// <param name="processId">ID of of Process item</param>/// <param name="flowId">ID of item to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteFlow(utility::string_t processId, utility::string_t flowId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for deleting a single item based on the gateway_id and Process ID.
    /// </remarks>
    /// <param name="processId">ID of of Process item</param>/// <param name="gatewayId">ID of item to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteGateway(utility::string_t processId, utility::string_t gatewayId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for deleting a single item based on the itemâ€™s ID.
    /// </remarks>
    /// <param name="id">ID of item to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteGroup(utility::string_t id);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for deleting a single item based on the InputOutput ID, Process ID and Task ID
    /// </remarks>
    /// <param name="processId">Process ID related to InputOutput object</param>/// <param name="taskId">Task instance ID related to InputOutput object</param>/// <param name="inputoutputUid">ID of InputOutput to fetch</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteInputOutput(utility::string_t processId, utility::string_t taskId, utility::string_t inputoutputUid);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for deleting a single item based on the instance ID and Process ID.
    /// </remarks>
    /// <param name="processId">ID of of Process item</param>/// <param name="instanceId">ID of item to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteInstance(utility::string_t processId, utility::string_t instanceId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for deleting a single item based on the itemâ€™s ID. 
    /// </remarks>
    /// <param name="id">ID of item to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteProcess(utility::string_t id);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for deleting a single item based on task_id and Process ID.
    /// </remarks>
    /// <param name="processId">ID of of Process item</param>/// <param name="taskId">ID of item to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteTask(utility::string_t processId, utility::string_t taskId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method deletes User from the system.
    /// </remarks>
    /// <param name="id">ID of item to delete</param>
    pplx::task<std::shared_ptr<ResultSuccess>> deleteUser(utility::string_t id);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for creating an event.
    /// </remarks>
    /// <param name="processId">ID of Process relative to event</param>/// <param name="eventId">ID of Event to trigger</param>/// <param name="triggerEventCreateItem">Json with some parameters</param>
    pplx::task<std::shared_ptr<DataModelItem_1>> eventTrigger(utility::string_t processId, utility::string_t eventId, std::shared_ptr<TriggerEventCreateItem> triggerEventCreateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for retrieving a client based on ID.
    /// </remarks>
    /// <param name="userId">ID of User to fetch</param>/// <param name="clientId">ID of Client to fetch</param>
    pplx::task<std::shared_ptr<ClientItem>> findClientById(utility::string_t userId, utility::string_t clientId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for retrieving all existing clients of user.
    /// </remarks>
    /// <param name="userId">ID of User relative to clients</param>/// <param name="page">Page Nr to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of Items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<ClientCollection>> findClients(utility::string_t userId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method returns the instance DataModel and lets work with it directly
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="instanceId">ID of Instance to fetch</param>/// <param name="page">Page Nr to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of Items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<DataModelItem_1>> findDataModel(utility::string_t processId, utility::string_t instanceId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for retrieving an event based on itâ€™s ID.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="eventId">ID of Event to fetch</param>
    pplx::task<std::shared_ptr<EventItem>> findEventById(utility::string_t processId, utility::string_t eventId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method returns all events related to the runned process
    /// </remarks>
    /// <param name="processId">ID of Process relative to event</param>/// <param name="page">Page Nr to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of Items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<EventCollection>> findEvents(utility::string_t processId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for retrieving a flow based on itâ€™s ID.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="flowId">ID of Flow to fetch</param>
    pplx::task<std::shared_ptr<FlowItem>> findFlowById(utility::string_t processId, utility::string_t flowId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for retrieving all existing flows.
    /// </remarks>
    /// <param name="processId">ID of Process relative to flow</param>/// <param name="page">Page Nr to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of Items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<FlowCollection>> findFlows(utility::string_t processId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for retrieving a gateway based on itâ€™s ID.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="gatewayId">ID of Gateway to fetch</param>
    pplx::task<std::shared_ptr<GatewayItem>> findGatewayById(utility::string_t processId, utility::string_t gatewayId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intending for retrieving all existing gateways.
    /// </remarks>
    /// <param name="processId">ID of Process relative to gateway</param>/// <param name="page">Page Nr to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of Items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<GatewayCollection>> findGateways(utility::string_t processId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is responsible for retrieving a group based on a single ID.
    /// </remarks>
    /// <param name="id">ID of Group to fetch</param>
    pplx::task<std::shared_ptr<GroupItem>> findGroupById(utility::string_t id);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is responsible for retrieving all existing groups.
    /// </remarks>
    /// <param name="page">Page Nr to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of Items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<GroupCollection>> findGroups(int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for retrieving an InputOutput object based on ID.
    /// </remarks>
    /// <param name="processId">Process ID related to InputOutput object</param>/// <param name="taskId">Task instance ID related to InputOutput object</param>/// <param name="inputoutputUid">ID of InputOutput to fetch</param>
    pplx::task<std::shared_ptr<InputOutputItem>> findInputOutputById(utility::string_t processId, utility::string_t taskId, utility::string_t inputoutputUid);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for retrieving all existing InputOutput objects for the related task instance.
    /// </remarks>
    /// <param name="processId">Process ID related to InputOutput object</param>/// <param name="taskId">Task instance ID related to InputOutput object</param>/// <param name="page">Page Nr to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of Items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<InputOutputCollection>> findInputOutputs(utility::string_t processId, utility::string_t taskId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is responsible for retrieving an instance based on itâ€™s ID.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="instanceId">ID of Instance to fetch</param>
    pplx::task<std::shared_ptr<InstanceItem>> findInstanceById(utility::string_t processId, utility::string_t instanceId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is responsible for retrieving all Instances related to the Process via Process ID
    /// </remarks>
    /// <param name="processId">Process ID relative to instance</param>/// <param name="page">Page Nr to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of Items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<InstanceCollection>> findInstances(utility::string_t processId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns the process based on a single ID
    /// </remarks>
    /// <param name="id">ID of Process to fetch</param>
    pplx::task<std::shared_ptr<ProcessItem>> findProcessById(utility::string_t id);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is responsible for retrieving all existing processes.
    /// </remarks>
    /// <param name="page">Page Nr to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of Items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<ProcessCollection>> findProcesses(int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is responsible for retrieving a task based on itâ€™s ID.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="taskId">ID of Task to fetch</param>
    pplx::task<std::shared_ptr<TaskItem>> findTaskById(utility::string_t processId, utility::string_t taskId);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is responsible for retrieving TaskInstance based on itâ€™s ID.
    /// </remarks>
    /// <param name="taskInstanceId">ID of TaskInstance to fetch</param>/// <param name="page">Page Nr to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of Items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<Inline_response_200>> findTaskInstanceById(utility::string_t taskInstanceId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is responsible for retrieving and finding tasks instances  related to the task
    /// </remarks>
    /// <param name="page">Page Nr to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of Items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<TaskInstanceCollection>> findTaskInstances(int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for returning a list of all Tasks related to the process
    /// </remarks>
    /// <param name="processId">ID of Process relative to task</param>/// <param name="page">Page Nr to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of Items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<TaskCollection>> findTasks(utility::string_t processId, int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is responsible for returning a user based on their ID.
    /// </remarks>
    /// <param name="id">ID of User to fetch</param>
    pplx::task<std::shared_ptr<UserItem>> findUserById(utility::string_t id);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for returning all existing users in the system.
    /// </remarks>
    /// <param name="page">Page Nr to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of Items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<UserCollection>> findUsers(int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for importing BPMN files. This import covers next BPMN 2.0 elements for modeling processes: Sequence Flows, Start event, End event, Message Start event, Message Intermediate event, Timer Boundary Interrupting Event, Timer Boundary Non-Interrupting Event, Script task, User task, Service task Exclusive Gateways, Inclusive Gateways, Parallel Gateways. A new process is created when import passed successful.
    /// </remarks>
    /// <param name="bpmnImportItem">JsonApi with the BPMN file to import</param>
    pplx::task<std::shared_ptr<ProcessCollection_1>> importBpmnFile(std::shared_ptr<BpmnImportItem> bpmnImportItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method returns User information based on Token
    /// </remarks>
    /// <param name="page">Page Nr to fetch (optional, default to 1)</param>/// <param name="perPage">Amount of Items per Page (optional, default to 15)</param>
    pplx::task<std::shared_ptr<UserItem>> myselfUser(int32_t page, int32_t perPage);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for removing groups from a task
    /// </remarks>
    /// <param name="processId">ID of Process</param>/// <param name="taskId">ID of Task</param>/// <param name="taskRemoveGroupsItem">JsonApi with Groups ids to remove</param>
    pplx::task<std::shared_ptr<ResultSuccess>> removeGroupsFromTask(utility::string_t processId, utility::string_t taskId, std::shared_ptr<TaskRemoveGroupsItem> taskRemoveGroupsItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for removing one or more users from a group.
    /// </remarks>
    /// <param name="id">ID of Group to modify</param>/// <param name="groupRemoveUsersItem">JsonApi with Users ids to remove</param>
    pplx::task<std::shared_ptr<ResultSuccess>> removeUsersFromGroup(utility::string_t id, std::shared_ptr<GroupRemoveUsersItem> groupRemoveUsersItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for synchronizing a one or more groups with a task.
    /// </remarks>
    /// <param name="processId">ID of Process</param>/// <param name="taskId">ID of Task to modify</param>/// <param name="taskSyncGroupsItem">JsonApi with Groups ids to sync</param>
    pplx::task<std::shared_ptr<ResultSuccess>> syncGroupsToTask(utility::string_t processId, utility::string_t taskId, std::shared_ptr<TaskSyncGroupsItem> taskSyncGroupsItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for synchronizing one or more users with a group.
    /// </remarks>
    /// <param name="id">ID of Group to modify</param>/// <param name="groupSyncUsersItem">JsonApi with Users ids to sync</param>
    pplx::task<std::shared_ptr<ResultSuccess>> syncUsersToGroup(utility::string_t id, std::shared_ptr<GroupSyncUsersItem> groupSyncUsersItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for updating an existing client.
    /// </remarks>
    /// <param name="userId">ID of User to fetch</param>/// <param name="clientId">ID of Client to fetch</param>/// <param name="clientUpdateItem">Client object to edit</param>
    pplx::task<std::shared_ptr<ClientItem>> updateClient(utility::string_t userId, utility::string_t clientId, std::shared_ptr<ClientUpdateItem> clientUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method lets update the existing Process Event with new  data
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="eventId">ID of Event to fetch</param>/// <param name="eventUpdateItem">Event object to edit</param>
    pplx::task<std::shared_ptr<EventItem>> updateEvent(utility::string_t processId, utility::string_t eventId, std::shared_ptr<EventUpdateItem> eventUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for updating an existing flow.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="flowId">ID of Flow to fetch</param>/// <param name="flowUpdateItem">Flow object to edit</param>
    pplx::task<std::shared_ptr<FlowItem>> updateFlow(utility::string_t processId, utility::string_t flowId, std::shared_ptr<FlowUpdateItem> flowUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for updating an existing gateway.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="gatewayId">ID of Gateway to fetch</param>/// <param name="gatewayUpdateItem">Gateway object to edit</param>
    pplx::task<std::shared_ptr<GatewayItem>> updateGateway(utility::string_t processId, utility::string_t gatewayId, std::shared_ptr<GatewayUpdateItem> gatewayUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for updating an existing group.
    /// </remarks>
    /// <param name="id">ID of Group to fetch</param>/// <param name="groupUpdateItem">Group object to edit</param>
    pplx::task<std::shared_ptr<GroupItem>> updateGroup(utility::string_t id, std::shared_ptr<GroupUpdateItem> groupUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for updating an existing InputOutput.
    /// </remarks>
    /// <param name="processId">Process ID related to InputOutput object</param>/// <param name="taskId">Task instance ID related to InputOutput object</param>/// <param name="inputoutputUid">ID of InputOutput to fetch</param>/// <param name="inputOutputUpdateItem">InputOutput object to edit</param>
    pplx::task<std::shared_ptr<InputOutputItem>> updateInputOutput(utility::string_t processId, utility::string_t taskId, utility::string_t inputoutputUid, std::shared_ptr<InputOutputUpdateItem> inputOutputUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for updating an existing Instance.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="instanceId">ID of Instance to fetch</param>/// <param name="instanceUpdateItem">Instance object to edit</param>
    pplx::task<std::shared_ptr<InstanceItem>> updateInstance(utility::string_t processId, utility::string_t instanceId, std::shared_ptr<InstanceUpdateItem> instanceUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for updating an existing process.
    /// </remarks>
    /// <param name="id">ID of Process to fetch</param>/// <param name="processUpdateItem">Process object to edit</param>
    pplx::task<std::shared_ptr<ProcessItem>> updateProcess(utility::string_t id, std::shared_ptr<ProcessUpdateItem> processUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for updating an existing task.
    /// </remarks>
    /// <param name="processId">ID of Process to fetch</param>/// <param name="taskId">ID of Task to fetch</param>/// <param name="taskUpdateItem">Task object to edit</param>
    pplx::task<std::shared_ptr<TaskItem>> updateTask(utility::string_t processId, utility::string_t taskId, std::shared_ptr<TaskUpdateItem> taskUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for updating an existing TaskInstance.
    /// </remarks>
    /// <param name="taskInstanceId">ID of TaskInstance to fetch</param>/// <param name="taskInstanceUpdateItem">TaskInstance object to update</param>
    pplx::task<std::shared_ptr<Inline_response_200>> updateTaskInstance(utility::string_t taskInstanceId, std::shared_ptr<TaskInstanceUpdateItem> taskInstanceUpdateItem);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// This method is intended for updating parameters an existing user.
    /// </remarks>
    /// <param name="id">ID of User to fetch</param>/// <param name="userUpdateItem">User object for update</param>
    pplx::task<std::shared_ptr<UserItem>> updateUser(utility::string_t id, std::shared_ptr<UserUpdateItem> userUpdateItem);
    
protected:
    std::shared_ptr<ApiClient> m_ApiClient;    
};
    
}
}
}
}

#endif /* ProcessmakerApi_H_ */

