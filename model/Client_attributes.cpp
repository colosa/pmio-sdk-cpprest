/**
 * ProcessMaker API
 * This ProcessMaker Core API provide access to the new generation engine with BPMN 2.0 support. The current Alpha 1.0 version supports  the part of BPM system functionality like process import, process execution, task assignment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alpha-program@processmaker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "Client_attributes.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Client_attributes::Client_attributes()
{
    m_Secret = U("");
    m_SecretIsSet = false;
    m_Name = U("");
    m_Personal_access_client = false;
    m_Personal_access_clientIsSet = false;
    m_Password_client = false;
    m_Password_clientIsSet = false;
    m_Revoked = false;
    m_RevokedIsSet = false;
    m_Created_atIsSet = false;
    m_Updated_atIsSet = false;
    
}

Client_attributes::~Client_attributes()
{
}

void Client_attributes::validate() 
{
    // TODO: implement validation
}

web::json::value Client_attributes::toJson() const
{
    web::json::value val = web::json::value::object();
     
	if(m_SecretIsSet)
    {
        val[U("secret")] = ModelBase::toJson(m_Secret);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_Personal_access_clientIsSet)
    {
        val[U("personal_access_client")] = ModelBase::toJson(m_Personal_access_client);
    }
    if(m_Password_clientIsSet)
    {
        val[U("password_client")] = ModelBase::toJson(m_Password_client);
    }
    if(m_RevokedIsSet)
    {
        val[U("revoked")] = ModelBase::toJson(m_Revoked);
    }
    if(m_Created_atIsSet)
    {
        val[U("created_at")] = ModelBase::toJson(m_Created_at);
    }
    if(m_Updated_atIsSet)
    {
        val[U("updated_at")] = ModelBase::toJson(m_Updated_at);
    }
    

    return val;
}

void Client_attributes::fromJson(web::json::value& val)
{
    if(val.has_field(U("secret")))
    {
        setSecret(ModelBase::stringFromJson(val[U("secret")]));
                
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("personal_access_client")))
    {
        setPersonalAccessClient(ModelBase::boolFromJson(val[U("personal_access_client")]));
    }
    if(val.has_field(U("password_client")))
    {
        setPasswordClient(ModelBase::boolFromJson(val[U("password_client")]));
    }
    if(val.has_field(U("revoked")))
    {
        setRevoked(ModelBase::boolFromJson(val[U("revoked")]));
    }
    if(val.has_field(U("created_at")))
    {
        if(!val[U("created_at")].is_null()) 
        {
            std::shared_ptr<DateTime> newItem(new DateTime());
            newItem->fromJson(val[U("created_at")]);
            setCreatedAt( newItem );
        }
                
    }
    if(val.has_field(U("updated_at")))
    {
        if(!val[U("updated_at")].is_null()) 
        {
            std::shared_ptr<DateTime> newItem(new DateTime());
            newItem->fromJson(val[U("updated_at")]);
            setUpdatedAt( newItem );
        }
                
    }
    
}

void Client_attributes::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	if(m_SecretIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("secret"), m_Secret));
                
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_Personal_access_clientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("personal_access_client"), m_Personal_access_client));
    }
    if(m_Password_clientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("password_client"), m_Password_client));
    }
    if(m_RevokedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("revoked"), m_Revoked));
    }
    if(m_Created_atIsSet)
    {
        if (m_Created_at.get())
        {
            m_Created_at->toMultipart(multipart, U("created_at."));
        }
                
    }
    if(m_Updated_atIsSet)
    {
        if (m_Updated_at.get())
        {
            m_Updated_at->toMultipart(multipart, U("updated_at."));
        }
                
    }
    
}

void Client_attributes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    if(multipart->hasContent(U("secret")))
    {
        setSecret(ModelBase::stringFromHttpContent(multipart->getContent(U("secret"))));
                
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("personal_access_client")))
    {
        setPersonalAccessClient(ModelBase::boolFromHttpContent(multipart->getContent(U("personal_access_client"))));
    }
    if(multipart->hasContent(U("password_client")))
    {
        setPasswordClient(ModelBase::boolFromHttpContent(multipart->getContent(U("password_client"))));
    }
    if(multipart->hasContent(U("revoked")))
    {
        setRevoked(ModelBase::boolFromHttpContent(multipart->getContent(U("revoked"))));
    }
    if(multipart->hasContent(U("created_at")))
    {
        if(multipart->hasContent(U("created_at")))
        {
            std::shared_ptr<DateTime> newItem(new DateTime());
            newItem->fromMultiPart(multipart, U("created_at."));
            setCreatedAt( newItem );
        }
                
    }
    if(multipart->hasContent(U("updated_at")))
    {
        if(multipart->hasContent(U("updated_at")))
        {
            std::shared_ptr<DateTime> newItem(new DateTime());
            newItem->fromMultiPart(multipart, U("updated_at."));
            setUpdatedAt( newItem );
        }
                
    }
    
}
    
   
utility::string_t Client_attributes::getSecret() const
{
	return m_Secret;
}
void Client_attributes::setSecret(utility::string_t value)
{
	m_Secret = value;
    m_SecretIsSet = true;
}
bool Client_attributes::secretIsSet() const
{
    return m_SecretIsSet;
}
void Client_attributes::unsetSecret() 
{
    m_SecretIsSet = false;
}
utility::string_t Client_attributes::getName() const
{
	return m_Name;
}
void Client_attributes::setName(utility::string_t value)
{
	m_Name = value;
    
}
bool Client_attributes::getPersonalAccessClient() const
{
	return m_Personal_access_client;
}
void Client_attributes::setPersonalAccessClient(bool value)
{
	m_Personal_access_client = value;
    m_Personal_access_clientIsSet = true;
}
bool Client_attributes::personal_access_clientIsSet() const
{
    return m_Personal_access_clientIsSet;
}
void Client_attributes::unsetPersonal_access_client() 
{
    m_Personal_access_clientIsSet = false;
}
bool Client_attributes::getPasswordClient() const
{
	return m_Password_client;
}
void Client_attributes::setPasswordClient(bool value)
{
	m_Password_client = value;
    m_Password_clientIsSet = true;
}
bool Client_attributes::password_clientIsSet() const
{
    return m_Password_clientIsSet;
}
void Client_attributes::unsetPassword_client() 
{
    m_Password_clientIsSet = false;
}
bool Client_attributes::getRevoked() const
{
	return m_Revoked;
}
void Client_attributes::setRevoked(bool value)
{
	m_Revoked = value;
    m_RevokedIsSet = true;
}
bool Client_attributes::revokedIsSet() const
{
    return m_RevokedIsSet;
}
void Client_attributes::unsetRevoked() 
{
    m_RevokedIsSet = false;
}
std::shared_ptr<DateTime> Client_attributes::getCreatedAt() const
{
	return m_Created_at;
}
void Client_attributes::setCreatedAt(std::shared_ptr<DateTime> value)
{
	m_Created_at = value;
    m_Created_atIsSet = true;
}
bool Client_attributes::created_atIsSet() const
{
    return m_Created_atIsSet;
}
void Client_attributes::unsetCreated_at() 
{
    m_Created_atIsSet = false;
}
std::shared_ptr<DateTime> Client_attributes::getUpdatedAt() const
{
	return m_Updated_at;
}
void Client_attributes::setUpdatedAt(std::shared_ptr<DateTime> value)
{
	m_Updated_at = value;
    m_Updated_atIsSet = true;
}
bool Client_attributes::updated_atIsSet() const
{
    return m_Updated_atIsSet;
}
void Client_attributes::unsetUpdated_at() 
{
    m_Updated_atIsSet = false;
}

}
}
}
}

