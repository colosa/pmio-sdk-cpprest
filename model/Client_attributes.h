/**
 * ProcessMaker API
 * This ProcessMaker Core API provide access to the new generation engine with BPMN 2.0 support. The current Alpha 1.0 version supports  the part of BPM system functionality like process import, process execution, task assignment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alpha-program@processmaker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Client_attributes.h
 * 
 * 
 */

#ifndef Client_attributes_H_
#define Client_attributes_H_


#include "ModelBase.h"

#include "DateTime.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Client_attributes
	: public ModelBase
{
public:
    Client_attributes();
    virtual ~Client_attributes();

	/////////////////////////////////////////////
	/// ModelBase overrides
	
    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;
    
 	/////////////////////////////////////////////
	/// Client_attributes members
	   
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSecret() const;
    void setSecret(utility::string_t value);
    bool secretIsSet() const;
    void unsetSecret();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    bool getPersonalAccessClient() const;
    void setPersonalAccessClient(bool value);
    bool personal_access_clientIsSet() const;
    void unsetPersonal_access_client();
    /// <summary>
    /// 
    /// </summary>
    bool getPasswordClient() const;
    void setPasswordClient(bool value);
    bool password_clientIsSet() const;
    void unsetPassword_client();
    /// <summary>
    /// 
    /// </summary>
    bool getRevoked() const;
    void setRevoked(bool value);
    bool revokedIsSet() const;
    void unsetRevoked();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DateTime> getCreatedAt() const;
    void setCreatedAt(std::shared_ptr<DateTime> value);
    bool created_atIsSet() const;
    void unsetCreated_at();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DateTime> getUpdatedAt() const;
    void setUpdatedAt(std::shared_ptr<DateTime> value);
    bool updated_atIsSet() const;
    void unsetUpdated_at();
    
protected:
    utility::string_t m_Secret;
    bool m_SecretIsSet;
utility::string_t m_Name;
    bool m_Personal_access_client;
    bool m_Personal_access_clientIsSet;
bool m_Password_client;
    bool m_Password_clientIsSet;
bool m_Revoked;
    bool m_RevokedIsSet;
std::shared_ptr<DateTime> m_Created_at;
    bool m_Created_atIsSet;
std::shared_ptr<DateTime> m_Updated_at;
    bool m_Updated_atIsSet;
};

}
}
}
}

#endif /* Client_attributes_H_ */
