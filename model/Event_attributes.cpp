/**
 * ProcessMaker API
 * This ProcessMaker Core API provide access to the new generation engine with BPMN 2.0 support. The current Alpha 1.0 version supports  the part of BPM system functionality like process import, process execution, task assignment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alpha-program@processmaker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "Event_attributes.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Event_attributes::Event_attributes()
{
    m_Name = U("");
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Process_id = U("");
    m_Message_id = nullptr;
    m_Message_idIsSet = false;
    m_Type = U("");
    m_Definition = U("");
    m_Interrupting = false;
    m_InterruptingIsSet = false;
    m_Condition = U("");
    m_ConditionIsSet = false;
    m_Time = U("");
    m_TimeIsSet = false;
    m_Duration = U("");
    m_DurationIsSet = false;
    m_Cycle = U("");
    m_CycleIsSet = false;
    m_Attached_to_task_id = nullptr;
    m_Attached_to_task_idIsSet = false;
    m_Created_atIsSet = false;
    m_Updated_atIsSet = false;
    
}

Event_attributes::~Event_attributes()
{
}

void Event_attributes::validate() 
{
    // TODO: implement validation
}

web::json::value Event_attributes::toJson() const
{
    web::json::value val = web::json::value::object();
     
	val[U("name")] = ModelBase::toJson(m_Name);
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    val[U("process_id")] = ModelBase::toJson(m_Process_id);
    if(m_Message_idIsSet)
    {
        val[U("message_id")] = ModelBase::toJson(m_Message_id);
    }
    val[U("type")] = ModelBase::toJson(m_Type);
    val[U("definition")] = ModelBase::toJson(m_Definition);
    if(m_InterruptingIsSet)
    {
        val[U("interrupting")] = ModelBase::toJson(m_Interrupting);
    }
    if(m_ConditionIsSet)
    {
        val[U("condition")] = ModelBase::toJson(m_Condition);
    }
    if(m_TimeIsSet)
    {
        val[U("time")] = ModelBase::toJson(m_Time);
    }
    if(m_DurationIsSet)
    {
        val[U("duration")] = ModelBase::toJson(m_Duration);
    }
    if(m_CycleIsSet)
    {
        val[U("cycle")] = ModelBase::toJson(m_Cycle);
    }
    if(m_Attached_to_task_idIsSet)
    {
        val[U("attached_to_task_id")] = ModelBase::toJson(m_Attached_to_task_id);
    }
    if(m_Created_atIsSet)
    {
        val[U("created_at")] = ModelBase::toJson(m_Created_at);
    }
    if(m_Updated_atIsSet)
    {
        val[U("updated_at")] = ModelBase::toJson(m_Updated_at);
    }
    

    return val;
}

void Event_attributes::fromJson(web::json::value& val)
{
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
                
    }
    setProcessId(ModelBase::stringFromJson(val[U("process_id")]));
    if(val.has_field(U("message_id")))
    {
        setMessageId(ModelBase::int32_tFromJson(val[U("message_id")]));
    }
    setType(ModelBase::stringFromJson(val[U("type")]));
    setDefinition(ModelBase::stringFromJson(val[U("definition")]));
    if(val.has_field(U("interrupting")))
    {
        setInterrupting(ModelBase::boolFromJson(val[U("interrupting")]));
    }
    if(val.has_field(U("condition")))
    {
        setCondition(ModelBase::stringFromJson(val[U("condition")]));
                
    }
    if(val.has_field(U("time")))
    {
        setTime(ModelBase::stringFromJson(val[U("time")]));
                
    }
    if(val.has_field(U("duration")))
    {
        setDuration(ModelBase::stringFromJson(val[U("duration")]));
                
    }
    if(val.has_field(U("cycle")))
    {
        setCycle(ModelBase::stringFromJson(val[U("cycle")]));
                
    }
    if(val.has_field(U("attached_to_task_id")))
    {
        setAttachedToTaskId(ModelBase::int32_tFromJson(val[U("attached_to_task_id")]));
    }
    if(val.has_field(U("created_at")))
    {
        if(!val[U("created_at")].is_null()) 
        {
            std::shared_ptr<DateTime> newItem(new DateTime());
            newItem->fromJson(val[U("created_at")]);
            setCreatedAt( newItem );
        }
                
    }
    if(val.has_field(U("updated_at")))
    {
        if(!val[U("updated_at")].is_null()) 
        {
            std::shared_ptr<DateTime> newItem(new DateTime());
            newItem->fromJson(val[U("updated_at")]);
            setUpdatedAt( newItem );
        }
                
    }
    
}

void Event_attributes::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
                
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("process_id"), m_Process_id));
    if(m_Message_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("message_id"), m_Message_id));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("definition"), m_Definition));
    if(m_InterruptingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("interrupting"), m_Interrupting));
    }
    if(m_ConditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("condition"), m_Condition));
                
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("time"), m_Time));
                
    }
    if(m_DurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("duration"), m_Duration));
                
    }
    if(m_CycleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cycle"), m_Cycle));
                
    }
    if(m_Attached_to_task_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("attached_to_task_id"), m_Attached_to_task_id));
    }
    if(m_Created_atIsSet)
    {
        if (m_Created_at.get())
        {
            m_Created_at->toMultipart(multipart, U("created_at."));
        }
                
    }
    if(m_Updated_atIsSet)
    {
        if (m_Updated_at.get())
        {
            m_Updated_at->toMultipart(multipart, U("updated_at."));
        }
                
    }
    
}

void Event_attributes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
                
    }
    setProcessId(ModelBase::stringFromHttpContent(multipart->getContent(U("process_id"))));
    if(multipart->hasContent(U("message_id")))
    {
        setMessageId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("message_id"))));
    }
    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    setDefinition(ModelBase::stringFromHttpContent(multipart->getContent(U("definition"))));
    if(multipart->hasContent(U("interrupting")))
    {
        setInterrupting(ModelBase::boolFromHttpContent(multipart->getContent(U("interrupting"))));
    }
    if(multipart->hasContent(U("condition")))
    {
        setCondition(ModelBase::stringFromHttpContent(multipart->getContent(U("condition"))));
                
    }
    if(multipart->hasContent(U("time")))
    {
        setTime(ModelBase::stringFromHttpContent(multipart->getContent(U("time"))));
                
    }
    if(multipart->hasContent(U("duration")))
    {
        setDuration(ModelBase::stringFromHttpContent(multipart->getContent(U("duration"))));
                
    }
    if(multipart->hasContent(U("cycle")))
    {
        setCycle(ModelBase::stringFromHttpContent(multipart->getContent(U("cycle"))));
                
    }
    if(multipart->hasContent(U("attached_to_task_id")))
    {
        setAttachedToTaskId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("attached_to_task_id"))));
    }
    if(multipart->hasContent(U("created_at")))
    {
        if(multipart->hasContent(U("created_at")))
        {
            std::shared_ptr<DateTime> newItem(new DateTime());
            newItem->fromMultiPart(multipart, U("created_at."));
            setCreatedAt( newItem );
        }
                
    }
    if(multipart->hasContent(U("updated_at")))
    {
        if(multipart->hasContent(U("updated_at")))
        {
            std::shared_ptr<DateTime> newItem(new DateTime());
            newItem->fromMultiPart(multipart, U("updated_at."));
            setUpdatedAt( newItem );
        }
                
    }
    
}
    
   
utility::string_t Event_attributes::getName() const
{
	return m_Name;
}
void Event_attributes::setName(utility::string_t value)
{
	m_Name = value;
    
}
utility::string_t Event_attributes::getDescription() const
{
	return m_Description;
}
void Event_attributes::setDescription(utility::string_t value)
{
	m_Description = value;
    m_DescriptionIsSet = true;
}
bool Event_attributes::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Event_attributes::unsetDescription() 
{
    m_DescriptionIsSet = false;
}
utility::string_t Event_attributes::getProcessId() const
{
	return m_Process_id;
}
void Event_attributes::setProcessId(utility::string_t value)
{
	m_Process_id = value;
    
}
int32_t Event_attributes::getMessageId() const
{
	return m_Message_id;
}
void Event_attributes::setMessageId(int32_t value)
{
	m_Message_id = value;
    m_Message_idIsSet = true;
}
bool Event_attributes::message_idIsSet() const
{
    return m_Message_idIsSet;
}
void Event_attributes::unsetMessage_id() 
{
    m_Message_idIsSet = false;
}
utility::string_t Event_attributes::getType() const
{
	return m_Type;
}
void Event_attributes::setType(utility::string_t value)
{
	m_Type = value;
    
}
utility::string_t Event_attributes::getDefinition() const
{
	return m_Definition;
}
void Event_attributes::setDefinition(utility::string_t value)
{
	m_Definition = value;
    
}
bool Event_attributes::getInterrupting() const
{
	return m_Interrupting;
}
void Event_attributes::setInterrupting(bool value)
{
	m_Interrupting = value;
    m_InterruptingIsSet = true;
}
bool Event_attributes::interruptingIsSet() const
{
    return m_InterruptingIsSet;
}
void Event_attributes::unsetInterrupting() 
{
    m_InterruptingIsSet = false;
}
utility::string_t Event_attributes::getCondition() const
{
	return m_Condition;
}
void Event_attributes::setCondition(utility::string_t value)
{
	m_Condition = value;
    m_ConditionIsSet = true;
}
bool Event_attributes::conditionIsSet() const
{
    return m_ConditionIsSet;
}
void Event_attributes::unsetCondition() 
{
    m_ConditionIsSet = false;
}
utility::string_t Event_attributes::getTime() const
{
	return m_Time;
}
void Event_attributes::setTime(utility::string_t value)
{
	m_Time = value;
    m_TimeIsSet = true;
}
bool Event_attributes::timeIsSet() const
{
    return m_TimeIsSet;
}
void Event_attributes::unsetTime() 
{
    m_TimeIsSet = false;
}
utility::string_t Event_attributes::getDuration() const
{
	return m_Duration;
}
void Event_attributes::setDuration(utility::string_t value)
{
	m_Duration = value;
    m_DurationIsSet = true;
}
bool Event_attributes::durationIsSet() const
{
    return m_DurationIsSet;
}
void Event_attributes::unsetDuration() 
{
    m_DurationIsSet = false;
}
utility::string_t Event_attributes::getCycle() const
{
	return m_Cycle;
}
void Event_attributes::setCycle(utility::string_t value)
{
	m_Cycle = value;
    m_CycleIsSet = true;
}
bool Event_attributes::cycleIsSet() const
{
    return m_CycleIsSet;
}
void Event_attributes::unsetCycle() 
{
    m_CycleIsSet = false;
}
int32_t Event_attributes::getAttachedToTaskId() const
{
	return m_Attached_to_task_id;
}
void Event_attributes::setAttachedToTaskId(int32_t value)
{
	m_Attached_to_task_id = value;
    m_Attached_to_task_idIsSet = true;
}
bool Event_attributes::attached_to_task_idIsSet() const
{
    return m_Attached_to_task_idIsSet;
}
void Event_attributes::unsetAttached_to_task_id() 
{
    m_Attached_to_task_idIsSet = false;
}
std::shared_ptr<DateTime> Event_attributes::getCreatedAt() const
{
	return m_Created_at;
}
void Event_attributes::setCreatedAt(std::shared_ptr<DateTime> value)
{
	m_Created_at = value;
    m_Created_atIsSet = true;
}
bool Event_attributes::created_atIsSet() const
{
    return m_Created_atIsSet;
}
void Event_attributes::unsetCreated_at() 
{
    m_Created_atIsSet = false;
}
std::shared_ptr<DateTime> Event_attributes::getUpdatedAt() const
{
	return m_Updated_at;
}
void Event_attributes::setUpdatedAt(std::shared_ptr<DateTime> value)
{
	m_Updated_at = value;
    m_Updated_atIsSet = true;
}
bool Event_attributes::updated_atIsSet() const
{
    return m_Updated_atIsSet;
}
void Event_attributes::unsetUpdated_at() 
{
    m_Updated_atIsSet = false;
}

}
}
}
}

