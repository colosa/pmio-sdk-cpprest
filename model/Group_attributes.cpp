/**
 * ProcessMaker API
 * This ProcessMaker Core API provide access to the new generation engine with BPMN 2.0 support. The current Alpha 1.0 version supports  the part of BPM system functionality like process import, process execution, task assignment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alpha-program@processmaker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "Group_attributes.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Group_attributes::Group_attributes()
{
    m_Code = U("");
    m_Title = U("");
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Status = U("");
    m_StatusIsSet = false;
    m_UsersIsSet = false;
    m_Created_atIsSet = false;
    m_Updated_atIsSet = false;
    
}

Group_attributes::~Group_attributes()
{
}

void Group_attributes::validate() 
{
    // TODO: implement validation
}

web::json::value Group_attributes::toJson() const
{
    web::json::value val = web::json::value::object();
     
	val[U("code")] = ModelBase::toJson(m_Code);
    val[U("title")] = ModelBase::toJson(m_Title);
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_StatusIsSet)
    {
        val[U("status")] = ModelBase::toJson(m_Status);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Users )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0) 
        {
            val[U("users")] = web::json::value::array(jsonArray);
        }
    }
    if(m_Created_atIsSet)
    {
        val[U("created_at")] = ModelBase::toJson(m_Created_at);
    }
    if(m_Updated_atIsSet)
    {
        val[U("updated_at")] = ModelBase::toJson(m_Updated_at);
    }
    

    return val;
}

void Group_attributes::fromJson(web::json::value& val)
{
    setCode(ModelBase::stringFromJson(val[U("code")]));
    setTitle(ModelBase::stringFromJson(val[U("title")]));
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
                
    }
    if(val.has_field(U("status")))
    {
        setStatus(ModelBase::stringFromJson(val[U("status")]));
                
    }
    {
        m_Users.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("users")))
        {
        for( auto& item : val[U("users")].as_array() )
        {
            m_Users.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    if(val.has_field(U("created_at")))
    {
        if(!val[U("created_at")].is_null()) 
        {
            std::shared_ptr<DateTime> newItem(new DateTime());
            newItem->fromJson(val[U("created_at")]);
            setCreatedAt( newItem );
        }
                
    }
    if(val.has_field(U("updated_at")))
    {
        if(!val[U("updated_at")].is_null()) 
        {
            std::shared_ptr<DateTime> newItem(new DateTime());
            newItem->fromJson(val[U("updated_at")]);
            setUpdatedAt( newItem );
        }
                
    }
    
}

void Group_attributes::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

	multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("title"), m_Title));
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
                
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("status"), m_Status));
                
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Users )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0) 
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("users"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_Created_atIsSet)
    {
        if (m_Created_at.get())
        {
            m_Created_at->toMultipart(multipart, U("created_at."));
        }
                
    }
    if(m_Updated_atIsSet)
    {
        if (m_Updated_at.get())
        {
            m_Updated_at->toMultipart(multipart, U("updated_at."));
        }
                
    }
    
}

void Group_attributes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
	if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
	{
		namePrefix += U(".");
	}

    setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("code"))));
    setTitle(ModelBase::stringFromHttpContent(multipart->getContent(U("title"))));
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
                
    }
    if(multipart->hasContent(U("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("status"))));
                
    }
    {
        m_Users.clear();
        if(multipart->hasContent(U("users")))
        {            
        
        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("users"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Users.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    if(multipart->hasContent(U("created_at")))
    {
        if(multipart->hasContent(U("created_at")))
        {
            std::shared_ptr<DateTime> newItem(new DateTime());
            newItem->fromMultiPart(multipart, U("created_at."));
            setCreatedAt( newItem );
        }
                
    }
    if(multipart->hasContent(U("updated_at")))
    {
        if(multipart->hasContent(U("updated_at")))
        {
            std::shared_ptr<DateTime> newItem(new DateTime());
            newItem->fromMultiPart(multipart, U("updated_at."));
            setUpdatedAt( newItem );
        }
                
    }
    
}
    
   
utility::string_t Group_attributes::getCode() const
{
	return m_Code;
}
void Group_attributes::setCode(utility::string_t value)
{
	m_Code = value;
    
}
utility::string_t Group_attributes::getTitle() const
{
	return m_Title;
}
void Group_attributes::setTitle(utility::string_t value)
{
	m_Title = value;
    
}
utility::string_t Group_attributes::getDescription() const
{
	return m_Description;
}
void Group_attributes::setDescription(utility::string_t value)
{
	m_Description = value;
    m_DescriptionIsSet = true;
}
bool Group_attributes::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Group_attributes::unsetDescription() 
{
    m_DescriptionIsSet = false;
}
utility::string_t Group_attributes::getStatus() const
{
	return m_Status;
}
void Group_attributes::setStatus(utility::string_t value)
{
	m_Status = value;
    m_StatusIsSet = true;
}
bool Group_attributes::statusIsSet() const
{
    return m_StatusIsSet;
}
void Group_attributes::unsetStatus() 
{
    m_StatusIsSet = false;
}
std::vector<utility::string_t>& Group_attributes::getUsers()
{
	return m_Users;
}
bool Group_attributes::usersIsSet() const
{
    return m_UsersIsSet;
}
void Group_attributes::unsetUsers() 
{
    m_UsersIsSet = false;
}
std::shared_ptr<DateTime> Group_attributes::getCreatedAt() const
{
	return m_Created_at;
}
void Group_attributes::setCreatedAt(std::shared_ptr<DateTime> value)
{
	m_Created_at = value;
    m_Created_atIsSet = true;
}
bool Group_attributes::created_atIsSet() const
{
    return m_Created_atIsSet;
}
void Group_attributes::unsetCreated_at() 
{
    m_Created_atIsSet = false;
}
std::shared_ptr<DateTime> Group_attributes::getUpdatedAt() const
{
	return m_Updated_at;
}
void Group_attributes::setUpdatedAt(std::shared_ptr<DateTime> value)
{
	m_Updated_at = value;
    m_Updated_atIsSet = true;
}
bool Group_attributes::updated_atIsSet() const
{
    return m_Updated_atIsSet;
}
void Group_attributes::unsetUpdated_at() 
{
    m_Updated_atIsSet = false;
}

}
}
}
}

