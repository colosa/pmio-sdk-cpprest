/**
 * ProcessMaker API
 * This ProcessMaker Core API provide access to the new generation engine with BPMN 2.0 support. The current Alpha 1.0 version supports  the part of BPM system functionality like process import, process execution, task assignment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alpha-program@processmaker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Process_attributes.h
 * 
 * 
 */

#ifndef Process_attributes_H_
#define Process_attributes_H_


#include "ModelBase.h"

#include "DateTime.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Process_attributes
	: public ModelBase
{
public:
    Process_attributes();
    virtual ~Process_attributes();

	/////////////////////////////////////////////
	/// ModelBase overrides
	
    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;
    
 	/////////////////////////////////////////////
	/// Process_attributes members
	   
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParentProcessId() const;
    void setParentProcessId(utility::string_t value);
    bool parent_process_idIsSet() const;
    void unsetParent_process_id();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStatus() const;
    void setStatus(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getDurationBy() const;
    void setDurationBy(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    void setType(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    bool getAssignment() const;
    void setAssignment(bool value);
    bool assignmentIsSet() const;
    void unsetAssignment();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDesignAccess() const;
    void setDesignAccess(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    bool getShowMap() const;
    void setShowMap(bool value);
    bool show_mapIsSet() const;
    void unsetShow_map();
    /// <summary>
    /// 
    /// </summary>
    bool getShowMessage() const;
    void setShowMessage(bool value);
    bool show_messageIsSet() const;
    void unsetShow_message();
    /// <summary>
    /// 
    /// </summary>
    bool getShowDelegate() const;
    void setShowDelegate(bool value);
    bool show_delegateIsSet() const;
    void unsetShow_delegate();
    /// <summary>
    /// 
    /// </summary>
    bool getShowDynaform() const;
    void setShowDynaform(bool value);
    bool show_dynaformIsSet() const;
    void unsetShow_dynaform();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCategoryId() const;
    void setCategoryId(utility::string_t value);
    bool category_idIsSet() const;
    void unsetCategory_id();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSubCategoryId() const;
    void setSubCategoryId(utility::string_t value);
    bool sub_category_idIsSet() const;
    void unsetSub_category_id();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreateUserId() const;
    void setCreateUserId(utility::string_t value);
    bool create_user_idIsSet() const;
    void unsetCreate_user_id();
    /// <summary>
    /// 
    /// </summary>
    bool getDebug() const;
    void setDebug(bool value);
    bool debugIsSet() const;
    void unsetDebug();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDynaformSummaryId() const;
    void setDynaformSummaryId(utility::string_t value);
    bool dynaform_summary_idIsSet() const;
    void unsetDynaform_summary_id();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DateTime> getCreatedAt() const;
    void setCreatedAt(std::shared_ptr<DateTime> value);
    bool created_atIsSet() const;
    void unsetCreated_at();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DateTime> getUpdatedAt() const;
    void setUpdatedAt(std::shared_ptr<DateTime> value);
    bool updated_atIsSet() const;
    void unsetUpdated_at();
    
protected:
    utility::string_t m_Name;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
utility::string_t m_Parent_process_id;
    bool m_Parent_process_idIsSet;
utility::string_t m_Status;
    utility::string_t m_Duration_by;
    utility::string_t m_Type;
    bool m_Assignment;
    bool m_AssignmentIsSet;
utility::string_t m_Design_access;
    bool m_Show_map;
    bool m_Show_mapIsSet;
bool m_Show_message;
    bool m_Show_messageIsSet;
bool m_Show_delegate;
    bool m_Show_delegateIsSet;
bool m_Show_dynaform;
    bool m_Show_dynaformIsSet;
utility::string_t m_Category_id;
    bool m_Category_idIsSet;
utility::string_t m_Sub_category_id;
    bool m_Sub_category_idIsSet;
utility::string_t m_Create_user_id;
    bool m_Create_user_idIsSet;
bool m_Debug;
    bool m_DebugIsSet;
utility::string_t m_Dynaform_summary_id;
    bool m_Dynaform_summary_idIsSet;
std::shared_ptr<DateTime> m_Created_at;
    bool m_Created_atIsSet;
std::shared_ptr<DateTime> m_Updated_at;
    bool m_Updated_atIsSet;
};

}
}
}
}

#endif /* Process_attributes_H_ */
