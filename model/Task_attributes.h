/**
 * ProcessMaker API
 * This ProcessMaker Core API provide access to the new generation engine with BPMN 2.0 support. The current Alpha 1.0 version supports  the part of BPM system functionality like process import, process execution, task assignment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alpha-program@processmaker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Task_attributes.h
 * 
 * 
 */

#ifndef Task_attributes_H_
#define Task_attributes_H_


#include "ModelBase.h"

#include "DateTime.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Task_attributes
	: public ModelBase
{
public:
    Task_attributes();
    virtual ~Task_attributes();

	/////////////////////////////////////////////
	/// ModelBase overrides
	
    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;
    
 	/////////////////////////////////////////////
	/// Task_attributes members
	   
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProcessId() const;
    void setProcessId(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    void setType(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getAssignType() const;
    void setAssignType(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getPriorityVariable() const;
    void setPriorityVariable(utility::string_t value);
    bool priority_variableIsSet() const;
    void unsetPriority_variable();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAssignVariable() const;
    void setAssignVariable(utility::string_t value);
    bool assign_variableIsSet() const;
    void unsetAssign_variable();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getGroupVariable() const;
    void setGroupVariable(utility::string_t value);
    bool group_variableIsSet() const;
    void unsetGroup_variable();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMiInstanceVariable() const;
    void setMiInstanceVariable(utility::string_t value);
    bool mi_instance_variableIsSet() const;
    void unsetMi_instance_variable();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMiCompleteVariable() const;
    void setMiCompleteVariable(utility::string_t value);
    bool mi_complete_variableIsSet() const;
    void unsetMi_complete_variable();
    /// <summary>
    /// 
    /// </summary>
    bool getTransferFly() const;
    void setTransferFly(bool value);
        /// <summary>
    /// 
    /// </summary>
    bool getCanUpload() const;
    void setCanUpload(bool value);
        /// <summary>
    /// 
    /// </summary>
    bool getViewUpload() const;
    void setViewUpload(bool value);
        /// <summary>
    /// 
    /// </summary>
    bool getViewAdditionalDocumentation() const;
    void setViewAdditionalDocumentation(bool value);
        /// <summary>
    /// 
    /// </summary>
    bool getStart() const;
    void setStart(bool value);
        /// <summary>
    /// 
    /// </summary>
    bool getSendLastEmail() const;
    void setSendLastEmail(bool value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getDerivationScreenTpl() const;
    void setDerivationScreenTpl(utility::string_t value);
    bool derivation_screen_tplIsSet() const;
    void unsetDerivation_screen_tpl();
    /// <summary>
    /// 
    /// </summary>
    int32_t getSelfserviceTimeout() const;
    void setSelfserviceTimeout(int32_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getSelfserviceTime() const;
    void setSelfserviceTime(utility::string_t value);
    bool selfservice_timeIsSet() const;
    void unsetSelfservice_time();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSelfserviceTimeUnit() const;
    void setSelfserviceTimeUnit(utility::string_t value);
    bool selfservice_time_unitIsSet() const;
    void unsetSelfservice_time_unit();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSelfserviceExecution() const;
    void setSelfserviceExecution(utility::string_t value);
    bool selfservice_executionIsSet() const;
    void unsetSelfservice_execution();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastAssignedUserId() const;
    void setLastAssignedUserId(utility::string_t value);
    bool last_assigned_user_idIsSet() const;
    void unsetLast_assigned_user_id();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getScript() const;
    void setScript(utility::string_t value);
    bool scriptIsSet() const;
    void unsetScript();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DateTime> getCreatedAt() const;
    void setCreatedAt(std::shared_ptr<DateTime> value);
    bool created_atIsSet() const;
    void unsetCreated_at();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DateTime> getUpdatedAt() const;
    void setUpdatedAt(std::shared_ptr<DateTime> value);
    bool updated_atIsSet() const;
    void unsetUpdated_at();
    
protected:
    utility::string_t m_Name;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
utility::string_t m_Process_id;
    utility::string_t m_Type;
    utility::string_t m_Assign_type;
    utility::string_t m_Priority_variable;
    bool m_Priority_variableIsSet;
utility::string_t m_Assign_variable;
    bool m_Assign_variableIsSet;
utility::string_t m_Group_variable;
    bool m_Group_variableIsSet;
utility::string_t m_Mi_instance_variable;
    bool m_Mi_instance_variableIsSet;
utility::string_t m_Mi_complete_variable;
    bool m_Mi_complete_variableIsSet;
bool m_Transfer_fly;
    bool m_Can_upload;
    bool m_View_upload;
    bool m_View_additional_documentation;
    bool m_Start;
    bool m_Send_last_email;
    utility::string_t m_Derivation_screen_tpl;
    bool m_Derivation_screen_tplIsSet;
int32_t m_Selfservice_timeout;
    utility::string_t m_Selfservice_time;
    bool m_Selfservice_timeIsSet;
utility::string_t m_Selfservice_time_unit;
    bool m_Selfservice_time_unitIsSet;
utility::string_t m_Selfservice_execution;
    bool m_Selfservice_executionIsSet;
utility::string_t m_Last_assigned_user_id;
    bool m_Last_assigned_user_idIsSet;
utility::string_t m_Script;
    bool m_ScriptIsSet;
std::shared_ptr<DateTime> m_Created_at;
    bool m_Created_atIsSet;
std::shared_ptr<DateTime> m_Updated_at;
    bool m_Updated_atIsSet;
};

}
}
}
}

#endif /* Task_attributes_H_ */
