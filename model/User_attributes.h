/**
 * ProcessMaker API
 * This ProcessMaker Core API provide access to the new generation engine with BPMN 2.0 support. The current Alpha 1.0 version supports  the part of BPM system functionality like process import, process execution, task assignment
 *
 * OpenAPI spec version: 1.0.0
 * Contact: alpha-program@processmaker.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * User_attributes.h
 * 
 * 
 */

#ifndef User_attributes_H_
#define User_attributes_H_


#include "ModelBase.h"

#include "DateTime.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  User_attributes
	: public ModelBase
{
public:
    User_attributes();
    virtual ~User_attributes();

	/////////////////////////////////////////////
	/// ModelBase overrides
	
    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;
    
 	/////////////////////////////////////////////
	/// User_attributes members
	   
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUsername() const;
    void setUsername(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getPassword() const;
    void setPassword(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getFirstname() const;
    void setFirstname(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastname() const;
    void setLastname(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    utility::string_t getEmail() const;
    void setEmail(utility::string_t value);
        /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DateTime> getExpireDate() const;
    void setExpireDate(std::shared_ptr<DateTime> value);
    bool expire_dateIsSet() const;
    void unsetExpire_date();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStatus() const;
    void setStatus(utility::string_t value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCountry() const;
    void setCountry(utility::string_t value);
    bool countryIsSet() const;
    void unsetCountry();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCity() const;
    void setCity(utility::string_t value);
    bool cityIsSet() const;
    void unsetCity();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLocation() const;
    void setLocation(utility::string_t value);
    bool locationIsSet() const;
    void unsetLocation();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddress() const;
    void setAddress(utility::string_t value);
    bool addressIsSet() const;
    void unsetAddress();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPhone() const;
    void setPhone(utility::string_t value);
    bool phoneIsSet() const;
    void unsetPhone();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFax() const;
    void setFax(utility::string_t value);
    bool faxIsSet() const;
    void unsetFax();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCellular() const;
    void setCellular(utility::string_t value);
    bool cellularIsSet() const;
    void unsetCellular();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getZipCode() const;
    void setZipCode(utility::string_t value);
    bool zip_codeIsSet() const;
    void unsetZip_code();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPosition() const;
    void setPosition(utility::string_t value);
    bool positionIsSet() const;
    void unsetPosition();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getResume() const;
    void setResume(utility::string_t value);
    bool resumeIsSet() const;
    void unsetResume();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBirthday() const;
    void setBirthday(utility::string_t value);
    bool birthdayIsSet() const;
    void unsetBirthday();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBookmarkStartCases() const;
    void setBookmarkStartCases(utility::string_t value);
    bool bookmark_start_casesIsSet() const;
    void unsetBookmark_start_cases();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTimeZone() const;
    void setTimeZone(utility::string_t value);
    bool time_zoneIsSet() const;
    void unsetTime_zone();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDefaultLang() const;
    void setDefaultLang(utility::string_t value);
    bool default_langIsSet() const;
    void unsetDefault_lang();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DateTime> getCreatedAt() const;
    void setCreatedAt(std::shared_ptr<DateTime> value);
    bool created_atIsSet() const;
    void unsetCreated_at();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DateTime> getUpdatedAt() const;
    void setUpdatedAt(std::shared_ptr<DateTime> value);
    bool updated_atIsSet() const;
    void unsetUpdated_at();
    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getClients();
    bool clientsIsSet() const;
    void unsetClients();
    
protected:
    utility::string_t m_Username;
    utility::string_t m_Password;
    utility::string_t m_Firstname;
    utility::string_t m_Lastname;
    utility::string_t m_Email;
    std::shared_ptr<DateTime> m_Expire_date;
    bool m_Expire_dateIsSet;
utility::string_t m_Status;
    bool m_StatusIsSet;
utility::string_t m_Country;
    bool m_CountryIsSet;
utility::string_t m_City;
    bool m_CityIsSet;
utility::string_t m_Location;
    bool m_LocationIsSet;
utility::string_t m_Address;
    bool m_AddressIsSet;
utility::string_t m_Phone;
    bool m_PhoneIsSet;
utility::string_t m_Fax;
    bool m_FaxIsSet;
utility::string_t m_Cellular;
    bool m_CellularIsSet;
utility::string_t m_Zip_code;
    bool m_Zip_codeIsSet;
utility::string_t m_Position;
    bool m_PositionIsSet;
utility::string_t m_Resume;
    bool m_ResumeIsSet;
utility::string_t m_Birthday;
    bool m_BirthdayIsSet;
utility::string_t m_Bookmark_start_cases;
    bool m_Bookmark_start_casesIsSet;
utility::string_t m_Time_zone;
    bool m_Time_zoneIsSet;
utility::string_t m_Default_lang;
    bool m_Default_langIsSet;
std::shared_ptr<DateTime> m_Created_at;
    bool m_Created_atIsSet;
std::shared_ptr<DateTime> m_Updated_at;
    bool m_Updated_atIsSet;
std::vector<int32_t> m_Clients;
    bool m_ClientsIsSet;
};

}
}
}
}

#endif /* User_attributes_H_ */
